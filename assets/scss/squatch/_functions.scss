@function color($key) {
  @if map-has-key($colors, $key) {
    @return map-get($colors, $key);
  }

  @warn "Unknown `#{$key}` in $colors.";
  @return null;
}

@function gray($key) {
  @if map-has-key($gray, $key) {
    @return map-get($gray, $key);
  }

  @warn "Unknown `#{$key}` in $colors.";
  @return null;
}


@function min-width($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @return (min-width: #{map-get($breakpoints, $breakpoint)}#{$breakpoint-unit)}) 
  }

  @else {
    @warn "No breakpoint value for `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@function max-width($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @return (max-width: #{(map-get($breakpoints, $breakpoint) - 0.1)}#{$breakpoint-unit)}) 
  }

  @else {
    @warn "No breakpoint value for `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@function navbar-min() { 
    @return (min-width: #{$breakpoint-navbar}#{$breakpoint-unit}) 
}
@function navbar-max() { 
    @return (max-width: #{($breakpoint-navbar - 0.1)}#{$breakpoint-unit})
}

@function sqrt ($r) {
    $x0: 1;
    $x1: $x0;

    @for $i from 1 through 10 {
        $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
        $x0: $x1;
    }

    @return $x1;
}

$red-magic-number: 241;
$green-magic-number: 691;
$blue-magic-number: 68;
$brightness-divisor: $red-magic-number + $green-magic-number + $blue-magic-number;

@function brightness($color) {
  // Extract color components
  $red-component: red($color);
  $green-component: green($color);
  $blue-component: blue($color);

  // Calculate a brightness value in 3d color space between 0 and 255
  $number: sqrt((($red-component * $red-component * $red-magic-number) + ($green-component * $green-component * $green-magic-number) + ($blue-component * $blue-component * $blue-magic-number)) / $brightness-divisor);

  // Convert to percentage and return
  @return 100% * $number / 255;
}


